---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pre-checks-task
spec:
  params:
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
      default: "false"
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: pattern
      description: Infrastructure pattern to use
      default: ""
  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
      - name: PATTERN
        value: $(params.pattern)
  steps:
    - name: code-update-check
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash

          if [[ "${PIPELINE_DEBUG}" == "true" ]]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          if [[ ! -f manifest.json ]]; then
             echo "Missing manifest file to check updates"
             exit 0;
          fi 

          REMOTE_REPO=$(cat manifest.json | jq -r .repository)
          VERSION=$(cat manifest.json | jq -r .version)

          TMP_DIR=/tmp/pattern
          mkdir $TMP_DIR
          git clone "${REMOTE_REPO}" "${TMP_DIR}"

          REMOTE_VERSION=$(cat "${TMP_DIR}/manifest.json" | jq -r .version)

          echo "Remote version => ${REMOTE_VERSION}"
          echo "Local version => ${VERSION}"

          #Need to upgrade
          BRANCH="updates-v${REMOTE_VERSION}"
          if [[ "${VERSION}" != "${REMOTE_VERSION}" ]]; then
             git ls-remote --exit-code --heads origin "${BRANCH}"
             if [[ $? -eq 0 ]]; then
               echo "Remote branch already exists, not creating another branch and skipping updating"
               exit 0;
             fi 

             git remote add landing-zone "${REMOTE_REPO}"
             git fetch landing-zone
             git checkout -b "${BRANCH}"

             git config --global user.email "cdtektonpipeline@ibm.com"
             git config --global user.name "CD Tekton Pipeline"
             git merge remotes/landing-zone/main --no-edit

             if [[ $? -ne 0 ]]; then
               printf "\n"
               printf "Merge was unsuccessful or there were merge conflicts.\n"  
               printf "Please refer to the documentation https://github.com/open-toolchain/landing-zone/tree/main#upgraded on how to perform an upgrade manually\n"

               exit 0;
             else 
               git push --set-upstream origin "${BRANCH}"

               printf "Merge was successful into branch %s. Please create a pull/merge request" "${BRANCH}"
             fi
          fi

          exit 0;

    - name: variables-check
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash

          if [[ "${PIPELINE_DEBUG}" == "true" ]]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          echo "Verify that all inputs that need to be user defined are set"
          grep -w "add user data here" ./patterns/$PATTERN/terraform.tfvars
          if [[ $? -eq 0 ]]; then
            echo "./patterns/$PATTERN/terraform.tfvars file contain variables that need user input.  Please change the variables that are \
            set to <add user data here> to an appropriate value"
            exit 1;
          fi
  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /secrets
  volumes:
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)

